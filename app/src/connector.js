// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["/app/components/msgpack-js-browser/msgpack.js", "/app/src/packets.js"], function(msgpack_, Packets) {
    var Connector;
    Connector = (function() {

      function Connector(scene, host, port) {
        var _this = this;
        this.scene = scene;
        this.onMessage = __bind(this.onMessage, this);

        this.host = window.location.host.split(":")[0];
        this.port = 8080;
        this.protocol = "mv-protocol";
        this.ws = new WebSocket("ws://" + this.host + ":" + this.port + "/", this.protocol);
        this.ws.binaryType = 'arraybuffer';
        this.ws.onopen = function() {
          return console.log("Opened socket");
        };
        this.ws.onclose = function() {
          return console.log("Closed socket");
        };
        this.ws.onmessage = this.onMessage;
      }

      Connector.prototype.onMessage = function(e) {
        var klass, message, messages, packet, packetId, _i, _len, _results;
        messages = msgpack.decode(e.data);
        _results = [];
        for (_i = 0, _len = messages.length; _i < _len; _i++) {
          message = messages[_i];
          packetId = message[0];
          klass = Packets.dictionary[packetId];
          packet = new klass(message);
          _results.push(packet.process(this.scene));
        }
        return _results;
      };

      return Connector;

    })();
    return Connector;
  });

}).call(this);
